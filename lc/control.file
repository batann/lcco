#!/bin/bash
# vim:fileencoding=utf-8:foldmethod=marker
#
#{{{ >>>   Variables >#4
CONFIGFILE="/home/$USER/.config/lc/config"
FILESDOT=("/home/$USER/lcbash/dotfiles/fzf.bash,/home/$USER/lcbash/dotfiles/inputrc,/home/$USER/lcbash/dotfiles/lc-cd,/home/$USER/lcbash/dotfiles/lc-sign,/home/$USER/lcbash/dotfiles/megarc,/home/$USER/lcbash/dotfiles/music.kdl,/home/$USER/lcbash/dotfiles/oolite-starter.conf,/home/$USER/lcbash/dotfiles/profile,/home/$USER/lcbash/dotfiles/rss.opml,/home/$USER/lcbash/dotfiles/taskrc,/home/$USER/lcbash/dotfiles/tkremind,/home/$USER/lcbash/dotfiles/tmux.conf,/home/$USER/lcbash/dotfiles/vimrc,/home/$USER/lcbash/dotfiles/Xauthority,/home/$USER/lcbash/dotfiles/xboardrc,/home/$USER/lcbash/dotfiles/Xdefaults,/home/$USER/lcbash/dotfiles/xinitrc,/home/$USER/lcbash/dotfiles/Xresources")
FILESBASH=("/home/$USER/lcbash/bashrc/bashrc,/home/$USER/lcbash/bashrc/bashrc.aliases,/home/$USER/lcbash/bashrc/bashrc.navigation)

DIRBASE="/home/$USER/lcbash"
DIRUSER="/media/batan/{100,200,300,400,500,600,700,800,900}"
DIRCONF=("/home/$USER/.config/lc-bashrc,/home/$USER/.config/lc-clipboard,/home/$USER/.config/lc-fm,/home/$USER/.config/lc-gutenberg,/home/$USER/.config/lc-mashpodder,/home/$USER/.config/lc-ollama,/home/$USER/.config/lc-ranger,/home/$USER/.config/lists")
FILESFUNCTIOS=""
#}}} <#13
#{{{ >>>   dotfiles
DOTFILES=("/home/$USER/.bash_aliases" "/home/$USER/.bash_logout" "/home/$USER/.bash_profile" "/home/$USER/.bashrc" "/home/$USER/.bashrc.aliases" "/home/$USER/.bashrc.aliases.sh" "/home/$USER/.bashrc.batan" "/home/$USER/.bashrc.bbatan" "/home/$USER/.bashrc.clipboard" "/home/$USER/.bashrc.dir" "/home/$USER/.bashrc.DONT" "/home/$USER/.bashrc.finish" "/home/$USER/.BASHRC.FIRST.LC" "/home/$USER/.bashrc.functions" "/home/$USER/.bashrc.getfold" "/home/$USER/.bashrc.log" "/home/$USER/.bashrc.navigation" "/home/$USER/.bashrc.profile" "/home/$USER/.bashrc.source.function" "/home/$USER/.bashrc.test" "/home/$USER/.fzf.bash" "/home/$USER/.inputrc" "/home/$USER/.lc-cd" "/home/$USER/.lc-sign" "/home/$USER/.megarc" "/home/$USER/.multi-timer" "/home/$USER/.music.kdl" "/home/$USER/.oolite-starter.conf" "/home/$USER/.playlist" "/home/$USER/.profile" "/home/$USER/.rainbowoauth" "/home/$USER/.reminder.md" "/home/$USER/.rss.opml" "/home/$USER/.taskrc" "/home/$USER/.tkremind" "/home/$USER/.tmux.conf" "/home/$USER/.vimrc" "/home/$USER/.vimrc.FoldUpdate" "/home/$USER/.Xauthority" "/home/$USER/.xbindkeysrc" "/home/$USER/.xbindkeysrc.org" "/home/$USER/.xboardrc" "/home/$USER/.Xdefaults" "/home/$USER/.xinitrc" "/home/$USER/.Xresources" "/home/$USER/.xsessionrc")
#}}}


#{{{ >>>   lc-daemon >#18

#run every half hour:
#{{{   >>>   remove cache pngs >#21
#System Maintanance to run in background on set intervals
#AS PART OF lc-deamon
CACHE_PNG=$(find .cache/ -maxdepth 3 -type f -name "*.png"|wc -l) #shred not remove eg -exec shred -z -f -n1 {} +
shred_cache_png() {
	find /home/$USER/.cache -maxdepth 3 -type f -name "*.png" -exec shred -z -f -n1 {} +
}
remove_cache_png() {
	find /home/$USER/.cache -maxdepth 3 -type f -name "*.png" -exec rm -rf {} +
}
#}}} <#31
#{{{ >>>   browser_history_to_list >#32
browser_history_to_list() {
browser-history|sort -u|sed 's!.*http!http!g'|sed 's![,].*$!!g'>> /home/$USER/.config/lists/firefox.list
cat /home/$USER/.config/lists/firefox.list|grep -vE "chess.com|duckduckgo "|sort -u >> /home/$USER/firefox.list
 rm /home/$USER/.config/lists/firefox.list
 mv /home/$USER/firefox.list /home/$USER/.config/lists/firefox.list
}
#}}} <#39
#{{{ >>>   backup_bash_history >#40
backup_bash_history() {
cat /home/$USER/.bash_history* >> /home/$USER/.config/lists/commands.md
cat /home/$USER/.config/lists/commands.md|sort -u >> /home/$USER/commands.md
rm /home/$USER/.config/lists/commands.md
mv /home/$USER/commands.md /home/$USER/.config/lists/commands.md
}
#}}} <#47
#{{{ >>>   announce time hourly >#48
announce_time() {
while :; do
    notify-send -t 11000 "Time is:" "<span color='Yellow' font='36px'>"$(date +%H:%M)" </span>"
    edge-playback -t $(date +%H:%M)
    sleep 2400
done
}
#}}} <#56
#{{{ >>>   notification to display quotes or rendom comments from /home/$USER/.config/lists/comments.md >#57
#while :; do notify-send -t 12000 "Excuse:" "$(cat /home/$USER/.config/lists/comments.md|sort -R|tail -n1)" && sleep 5m ;done
#}}} <#59

###   functions - lisening to changes in clipbord and lc-gutenberg directory >#58

#{{{ >>> track_data_transfer
track_data_transfer() {
if [[ ! -d "/home/$USER/netgear" ]]; then
	git clone https://github.com/batann/netgear
fi
nohup sudo -u batan bash /home/$USER/netgear/src/get-data.sh &
PIDTracktransfer=$!
sleep 1
firefox /home/bata/netgear/src/index.html
}
#}}}
#{{{ >>>   clear clipbord >#69
xclip -selection clipboard /dev/null && xclip -selection primary /dev/null
#}}} <#71
#{{{ >>>   Text To Voice >#72
#watch directory for changes
lc-clipboard_gutenberg() {
WATCH_DIR="/home/$USER/.config/lc-gutenberg"
VOICE="en-US-EmmaNeural"  # Change this if needed

inotifywait -m -e create --format '%f' "$WATCH_DIR" | while read -r file; do
    [[ $file == *.txt ]] || continue

    base="${file%.txt}"
    txt="$WATCH_DIR/$file"
    mp3="$WATCH_DIR/$base.mp3"

    /home/$USER/.local/bin/edge-tts --voice "$VOICE" -f "$txt" --write-media "$mp3" &>/dev/null
    mpv --no-terminal "$mp3"
read -n1 -p "asd" fff
    rm -f "$txt" "$mp3"
done
}
#}}} <#91
#{{{ >>>   Move Reg >#92
move_register() {

        cat /home/$USER/.config/lc-clipboard/register9|grep "http" >> /home/$USER/.config/lc-clipboard/auto.register.md 2>/dev/null
		rm -f /home/$USER/.config/lc-clipboard/register9 2>/dev/null
		mv /home/$USER/.config/lc-clipboard/register8 /home/$USER/.config/lc-clipboard/register9 2>/dev/null
		mv /home/$USER/.config/lc-clipboard/register7 /home/$USER/.config/lc-clipboard/register8 2>/dev/null
		mv /home/$USER/.config/lc-clipboard/register6 /home/$USER/.config/lc-clipboard/register7 2>/dev/null
		mv /home/$USER/.config/lc-clipboard/register5 /home/$USER/.config/lc-clipboard/register6 2>/dev/null
		mv /home/$USER/.config/lc-clipboard/register4 /home/$USER/.config/lc-clipboard/register5 2>/dev/null
		mv /home/$USER/.config/lc-clipboard/register3 /home/$USER/.config/lc-clipboard/register4 2>/dev/null
		mv /home/$USER/.config/lc-clipboard/register2 /home/$USER/.config/lc-clipboard/register3 2>/dev/null
		mv /home/$USER/.config/lc-clipboard/register1 /home/$USER/.config/lc-clipboard/register2 2>/dev/null
		touch /home/$USER/.config/lc-clipboard/register1
}
#}}} <#107
#{{{ >>>   lc-clipboard background >#108
lc-clipboard-logic() {
    DIR_BASE="$HOME/.config/lc-clipboard"
    CONFIG_FILE="$DIR_BASE/config"
	TOGGLE_FILE="$DIR_BASE/toggle_*"
    if [[ $TOGGLE_FILE == "toggle_tts" ]]; then
        MODECLIP="I"
    elif [[ $TOGGLE_FILE == "toggle_clipboard" ]]; then
        MODECLIP="II"
    elif [[ $TOGGLE_FILE == "toggle_music" ]]; then
        MODECLIP="III"
    elif [[ $TOGGLE_FILE == "toggle_search" ]]; then
        MODECLIP="IV"
    elif [[ $TOGGLE_FILE == "toggle_cloud" ]]; then
        MODECLIP="V"
    fi


#	TOGGLE_FILE="$DIR_BASE/toggle_register"
 #   mkdir -p "$DIR_BASE"
 #   touch "$CONFIG_FILE"

    previous_clipboard=""

    while true; do
        # Load config values (key=value format)
        [[ -f "$CONFIG_FILE" ]] && source "$CONFIG_FILE"
        current_clipboard=$(xclip -o -selection clipboard 2>/dev/null)
        cleaned_clipboard=$(echo "$current_clipboard" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

        # Skip empty or unchanged clipboard
        [[ -z "$cleaned_clipboard" || "$cleaned_clipboard" == "$previous_clipboard" ]] && sleep 0.0001 && continue
		if [[ -f "$TOGGLE_FILE" ]]; then
			xclip -o -selection clipboard >> /home/$USER/.config/lc-gutenberg/$(( $(ls /home/$USER/.config/lc-gutenberg/*.txt|wc -l 2>/dev/null) + 1 )).txt
        else
			move_register
			echo "$cleaned_clipboard" > "$DIR_BASE/register1"
		fi


        # === Conditional Logic ===
        if [[ "$cleaned_clipboard" == http* ]]; then
            echo "$cleaned_clipboard" >> "$DIR_BASE/urls.log"

        elif grep -qi youtube <<< "$cleaned_clipboard"; then
            echo "$cleaned_clipboard" >> "$DIR_BASE/youtube.log"

        elif [[ "${LOG_PLAIN}" == "true" ]]; then
            echo "$cleaned_clipboard" >> "$DIR_BASE/plain.log"

 #       elif [[ -n "$REDIRECT_PATH" ]]; then
 #           echo "$cleaned_clipboard" >> "$REDIRECT_PATH"
#
#        elif [[ "$CENSOR" == "true" ]]; then
#            echo "[CENSORED]" >> "$DIR_BASE/censored.log"

#        elif [[ "$cleaned_clipboard" == *password* ]]; then
#            echo "[SECRET]" >> "$DIR_BASE/secrets.log"

        fi
 echo $cleaned_clipboard >> ~/urls.txt
        previous_clipboard="$cleaned_clipboard"
        sleep 0.0001
    done
}
#}}} <#173
#{{{ >>>   execute above functions in detached background and display respective PID >#174
announce_time &
PIDannouncetime=$!
echo "Announce_time: $PIDannouncetime"
lc-clipboard_gutenberg &
PIDgutenberg=$!
echo "Gutenberg: $PIDgutenberg"
lc-clipboard-logic &
PIDclipboard=$!
echo "Clipboard: $PIDclipboard"
#}}} <#184
#}}} <#185





#{{{ >>>   functions >#191
update_dotfiles() {
	for i in $(ls $DIRBASHE/dotfiles); do
		if [[ $i == "/home/$USER/.$i" ]]; then
			mv /home/$USER/.$i /home/$USER/.$i.org
		fi
		cp $DIRBASE/dotfiles/$i /home/$USER/.$i
	done
}

setlightdm() {
	if [[ -f /etc/lightdm/lightdm-gtk-greeter.conf ]]; then
	cat /etc/lightdm/lightdm-gtk-greeter.conf|grep lightdm.png >/dev/null 2>&1
	if [[ $? == "0" ]]; then
		return
	fi
	else
		git clone https://github.com/batann/lightdm-gtk-greeter
		sudo mv /etc/lightdm/lightdm-gtk-greeter.conf /etc/lightdm/lightdm-gtk-greeter.conf.org
		sudo mv lightdm-gtk-greeter/* /etc/lightdm
	fi

}

#}}} <#215
